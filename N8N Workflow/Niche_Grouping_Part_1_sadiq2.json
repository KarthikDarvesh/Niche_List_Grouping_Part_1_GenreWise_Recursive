{
  "name": "Niche_Grouping_Part_1 sadiq2",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.1.242:8001/niche_grouping",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=\n{{ $json.data.toJsonString() }}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 2100000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1140,
        -300
      ],
      "id": "5ccaef8f-c570-4c38-b721-39fcee81f9e8",
      "name": "HTTP Request",
      "alwaysOutputData": false,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nlet results = [];\n\nfor (const item of input) {\n  const genreName = item.json.Genre_Name;\n  const subclusters = item.json.Subclusters;\n\n  for (const cluster of subclusters) {\n    const clusterName = cluster.Generated_Cluster_Name;\n    const niches = cluster.List_Of_Niches_In_The_Cluster;\n\n    for (const niche of niches) {\n      results.push({\n        json: {\n          genre_name: genreName,\n          gen_cluster_name: clusterName,\n          niche_name: niche.Niche_Name,\n          gencluster_niche_similarity_score: niche.Semantic_Similarity\n        }\n      });\n    }\n  }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        -120
      ],
      "id": "5972fc68-ab5d-437f-9eb1-726d31832ad7",
      "name": "Flatten Genre-Cluster-Niche"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        200,
        -520
      ],
      "id": "dec9b328-0d86-408e-ba0e-b843f559ce33",
      "name": "When clicking ‘Test workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select genre_id, genre_name from channel_genres \n  order by genre_id\nlimit 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        420,
        -520
      ],
      "id": "cb84a398-23e1-4bd9-b79f-80165ab97187",
      "name": "channel_genres",
      "credentials": {
        "postgres": {
          "id": "WEkIXnlS96zCRglf",
          "name": "YouTube_Neon"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select genre_id, niche_id, genre_name, niche_name from genre_niche_mapping_view where genre_id = {{ $json.genre_id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        660,
        -300
      ],
      "id": "7cf2ac07-bb8e-4baf-b222-83655f7b3dec",
      "name": "genre_niche_mapping_view",
      "credentials": {
        "postgres": {
          "id": "WEkIXnlS96zCRglf",
          "name": "YouTube_Neon"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all the PG data from the previous node\nconst pgData = items.map(item => item.json);\n\n// Structure the output as { \"data\": pgData }\nconst output = {\n  data: pgData\n};\n\n// Return the output in the required format\nreturn [\n  {\n    json: output\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        -300
      ],
      "id": "0385af42-e7cd-48e5-8516-a1e00c7b09a5",
      "name": "Structure the input format"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "channel_pillars",
          "mode": "list",
          "cachedResultName": "channel_pillars"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "pillar_name": "={{ $json.pillar_name }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "pillar_id",
              "displayName": "pillar_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "pillar_name",
              "displayName": "pillar_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_by",
              "displayName": "created_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "modified_at",
              "displayName": "modified_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "modified_by",
              "displayName": "modified_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1820,
        -120
      ],
      "id": "d6e88474-04ca-42d4-91a2-af9c791d1554",
      "name": "insert  in channel_pillars",
      "credentials": {
        "postgres": {
          "id": "WEkIXnlS96zCRglf",
          "name": "YouTube_Neon"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect all cluster names\nconst allItems = $input.all();\nconst clusterNames = allItems.map(item => item.json.gen_cluster_name);\n\n// Optionally deduplicate\nconst uniqueClusterNames = [...new Set(clusterNames)];\n\n// Format as array of objects for DB insert\nreturn uniqueClusterNames.map(name => ({\n  json: {\n    pillar_name: name // or use: pillar_name: name if your table expects pillar_name\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        -120
      ],
      "id": "b549d074-e21b-4c17-8c56-e539220b0336",
      "name": "all_pillar_names"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2520,
        -120
      ],
      "id": "0e28d34f-d79b-41ba-8ec0-12bb6ea6163b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Get all data from the \"Flatten Genre-Cluster-Niche\" node\nconst inputItems = $items(\"Flatten Genre-Cluster-Niche\", 0);\n\n// Extract and deduplicate cluster names\nconst clusterNames = inputItems.map(item => item.json.gen_cluster_name);\nconst uniqueClusterNames = [...new Set(clusterNames)];\n\n// Escape single quotes and format for SQL\nconst formatted = uniqueClusterNames\n  .map(name => `'${name.replace(/'/g, \"''\")}'`) // Escape ' as ''\n  .join(',\\n');\n\n// Return the SQL-ready string\nreturn [\n  {\n    json: {\n      sql_in_clause: formatted\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        -120
      ],
      "id": "31befc54-bef0-4f2e-8276-985859770043",
      "name": "all_pillars_sql"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from channel_pillars\nwhere pillar_name in (\n  {{ $json.sql_in_clause }}\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2300,
        -120
      ],
      "id": "3da4d3e7-fe1c-444a-8a49-8a9138e3119f",
      "name": "get_pillar_id",
      "credentials": {
        "postgres": {
          "id": "WEkIXnlS96zCRglf",
          "name": "YouTube_Neon"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const currentPillar = $json; // from get_pillar_id\n\nconst flattenItems = $items(\"Flatten Genre-Cluster-Niche\", 0);\nconst mappingItems = $items(\"genre_niche_mapping_view\", 0);\n\nconst matches = flattenItems.filter(item => item.json.gen_cluster_name === currentPillar.pillar_name);\n\nconst result = [];\n\nfor (const match of matches) {\n  const genreName = match.json.genre_name?.trim();\n  const nicheName = match.json.niche_name?.trim();\n\n  // Find genre/niche match in mapping view\n  const mapping = mappingItems.find(\n    m => m.json.genre_name?.trim() === genreName && m.json.niche_name?.trim() === nicheName\n  );\n\n  if (mapping) {\n    result.push({\n      json: {\n        genre_id: mapping.json.genre_id,\n        pillar_id: currentPillar.pillar_id,\n        niche_id: mapping.json.niche_id,\n      }\n    });\n  }\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        -100
      ],
      "id": "97ac60e6-5dd6-4e32-9df3-07a4d03be7d3",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE genre_pillar_niche_mapping\nSET pillar_id = {{ $json.pillar_id }}\nWHERE genre_id = {{ $json.genre_id }} AND niche_id = {{ $json.niche_id }};\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2920,
        -100
      ],
      "id": "d0055c81-f7a0-49e0-86b7-d672b740f374",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "WEkIXnlS96zCRglf",
          "name": "YouTube_Neon"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        420,
        -300
      ],
      "id": "a764270e-7520-47f2-b0b3-f4b8b8d973c4",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Flatten Genre-Cluster-Niche",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten Genre-Cluster-Niche": {
      "main": [
        [
          {
            "node": "all_pillar_names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "channel_genres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "channel_genres": {
      "main": [
        []
      ]
    },
    "genre_niche_mapping_view": {
      "main": [
        [
          {
            "node": "Structure the input format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure the input format": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert  in channel_pillars": {
      "main": [
        [
          {
            "node": "all_pillars_sql",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "all_pillar_names": {
      "main": [
        [
          {
            "node": "insert  in channel_pillars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "all_pillars_sql": {
      "main": [
        [
          {
            "node": "get_pillar_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_pillar_id": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "genre_niche_mapping_view",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "341b23cd-706d-45c5-998f-a5182e4996d5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "te9iKpTW890DKk0G",
  "tags": [
    {
      "createdAt": "2025-04-23T14:09:57.695Z",
      "updatedAt": "2025-04-23T14:09:57.695Z",
      "id": "sPO9SPUefiHpgdlv",
      "name": "channel_pillar"
    }
  ]
}